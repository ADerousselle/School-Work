Author: Abigail Derousselle
Date: 09/30/2023
Programming Assignment 1

-------------------------------------------------------------------------------------------

Program Name: 
	process_gen.cpp
Purpose:
	Answers Problem 1 in Programming Assignment 1, which asks you to generate a 	workload for a system of 1000 processes.
How To Use:
	1. Go to the location you have saved PrgAssign1 and open the folder.
		ex.	"cd Your/Path/Here/PrgAssign1"
	2. Compilation: 
		The program has already been compiled so this step is may be skipped.
		Compile with the following command line:
			"g++ -o process_gen src/process_gen.cpp"
	3. Execution:
		The program expects no arguments so it may be executed with the following
		command line:
			"./process_gen"
	4. Viewing Results
		Open the output folder.
			"cd output"
		Open the file "process_gen_out.txt"
			"nano process_gen_out.txt"
Understanding the Output:
	Line 1: Indicates the average rate it took for a process to arrive at the server
		based on the processes generated in the program.
	Line 2: Indicates the average time it took for a process to be serviced by the 			server
		based on the processes generated in the program.
	Line 3: Indicates the number of processes generated by the program.
	Line 4+: The complete list of 1000 processes generated during the execution of the 		program. Each process is composed of 3 numbers: 
		An ID, its actual arrival time in seconds, and its actual service time in 		seconds. 

-------------------------------------------------------------------------------------------

Program Name: 
	server_fail.cpp
Purpose:
	Answers Problem 2a and 2b in Programming Assignment 1. 2a asks you to generate 	failure and restoration times for two severs over 20 years. 2b asks you to 	calculate the average time until a total system failure for 2 servers.
How to Use:
	1. Go to the location you have saved PrgAssign1 and open the folder.
		ex.	"cd Your/Path/Here/prgAssign1"
	2. Compilation:
		The program has already been compiled so this step may be skipped.
		Compile with the following command line:
			"g++ -o server_fail src/server_fail.cpp"
	3. Execution:
		The program is designed execute for either part a or part b of problem 2.
		So to answer a part the execution is different.
		
		Part a:
		Execution of part a is the default, and no arguments are accepted. So 
		execution is simple. Enter this to the command line:
			"./server_fail"

		Part b:
		Execution of part b is not the default so the program must receive the 
		argument 'b', and optionally a number to indicate how many simulation you
		want to run. The default number of simulations is 500 but any number less 		than 500 is acceptable. Numbers over 500 show a tendency to produce 			overflow. The following are acceptable examples of lines to run part b:
		ex.	"./server_fail b"
			"./server_fail b 10"
			"./server_fail b 500"
	4. Viewing the Results:
		Open the output folder.
			"cd output"
		To view the output for...
		Part a:
			"nano server_fail_a_out.txt"
		Part b:
			"nano server_fail_b_out.txt"
Understanding the Output:
	server_fail_a_out.txt:
		Line 1: Indicates that the following list is the failure and restoration 			times for Server 1.
		Line 2-?: A list of the process failure events generated for 20 years. The 			first column is the failure times and the second coloumn is the 			associated restoration times.
		Line ?+1: Indicates that the following list is the failure and restoration 			times for Server 2.
		Line ?+1 - ??: A list of process failure events generated for 20 years. 			The first column is the failure times and the second column in the 			associated restoration times.
	server_fail_b_out.txt
		Line 1: Indictaes the average time until a total system failure based on 			500 (or a number you chose < 500) simulations
		Line 2+: A list of times it took for a total system failure over 500 (or a 			number you chose < 500) simulations.